// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/deepakkamesh/webtunnel/webtunnelcommon (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockInterface) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockInterfaceMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInterface)(nil).Close))
}

// IsTAP mocks base method
func (m *MockInterface) IsTAP() bool {
	ret := m.ctrl.Call(m, "IsTAP")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTAP indicates an expected call of IsTAP
func (mr *MockInterfaceMockRecorder) IsTAP() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTAP", reflect.TypeOf((*MockInterface)(nil).IsTAP))
}

// IsTUN mocks base method
func (m *MockInterface) IsTUN() bool {
	ret := m.ctrl.Call(m, "IsTUN")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTUN indicates an expected call of IsTUN
func (mr *MockInterfaceMockRecorder) IsTUN() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTUN", reflect.TypeOf((*MockInterface)(nil).IsTUN))
}

// Name mocks base method
func (m *MockInterface) Name() string {
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockInterfaceMockRecorder) Name() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInterface)(nil).Name))
}

// Read mocks base method
func (m *MockInterface) Read(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockInterfaceMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockInterface)(nil).Read), arg0)
}

// Write mocks base method
func (m *MockInterface) Write(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockInterfaceMockRecorder) Write(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockInterface)(nil).Write), arg0)
}
